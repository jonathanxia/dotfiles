set exrc
set secure

"indentation rules
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set backspace=2

set tags=tags; "This way we get the tags file recursively

set splitbelow "This way the preview window will appear below
set previewheight=10 "The preview height will be 4 when we open a preview window

"highlights the 79th column
set colorcolumn=79
highlight ColorColumn ctermbg=235

"set numbering on the side
set number
set relativenumber

"This allows vim to search for included header files
let &path.="src/include,/usr/include/,"
set includeexpr=substitute(v:fname,'\\.','/','g')

"Always display the status line
set laststatus=2

" Search in the current working directory rather than the root of a git
" repo
let g:ctrlp_working_path_mode = ''
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|class)$',
  \ }

let g:airline_section_y='BN: %{bufnr("%")}' "The buffer number in status bar
let g:airline_powerline_fonts=1 "enables powerline fonts to make it look nicer
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.dirty='!'
let g:airline_theme='base16_vim'
let g:airline#extensions#tabline#enabled = 1
let airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tmuxline#enabled = 0

"make easy tags run asynchronously
let g:easytags_async=1
let g:easytags_dynamic_files=1

map <C-n> :NERDTreeTabsToggle<CR>
nmap <leader>n :NERDTreeFind<CR>
nmap <F8> :TagbarToggle<CR>
nmap <F7> :res +2<CR>
nmap <F6> :res -2<CR>
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
nmap <F9> :Gstatus<CR>
nmap <F10> :Gcommit%<CR>
"Shortcut to convert camel case into snake case
vmap <leader>s :s#\(\<\u\l\+\\|\l\+\)\(\u\)#\l\1_\l\2#g<CR>

set completeopt-=preview "Not have preview window jump out every time

if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

au BufNewFile,BufRead *.ldg,*.ledger setf ledger | comp ledger
au FileType ledger nmap <buffer> <F11> :LedgerAlign<CR>
au FileType ledger vmap <buffer> <F11> :LedgerAlign<CR>
au FileType ledger nmap <buffer> <F12> :call ledger#entry()<CR>

au FileType tex map <buffer> <C-l> :w<CR> :!pdflatex %<CR><CR>
au FileType tex imap <buffer> <C-l> <ESC> :w<CR> :!latexmk -pdf<CR><CR>
"Make latex files indent by 2 spaces, not 4
au FileType tex set shiftwidth=2
"Easy mapping to make a list
au FileType tex imap <buffer> iiii \begin{itemize}<CR>\item<CR>\end{itemize}<ESC>k$


let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=0
"Disable YCM for ledger files
let g:ycm_filetype_blacklist = {'ledger': 1}
let g:ycm_disable_signature_help=1

highlight SpellCap ctermbg=DarkRed ctermfg=White
highlight SpellBad ctermbg=DarkRed ctermfg=White

nnoremap <leader>jd :YcmComplete GoTo<CR>
nnoremap <leader>jr :YcmComplete GoToReferences<CR>
nnoremap <leader>jc :YcmComplete GoToDeclaration<CR>
nnoremap <leader>gd :YcmComplete GetDoc<CR>
nnoremap <leader>gt :YcmComplete GetType<CR>
nnoremap <leader>gp :YcmComplete GetParent<CR>

"set nohlsearch
set incsearch

let g:ycm_show_diagnostics_ui = 0

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"Tidy-imports
nnoremap <leader>t :w<CR> :!tidy-imports %<CR>
nnoremap <leader>wt :w<CR> :!tidy-imports % --align=42<CR>

nnoremap ,co :botright cwindow<CR>

" Use ag instead of ack for vimack
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
